
    /**
     * @license
     * author: ace53thntu <ace53thntu@gmail.com>
     * video-sdk-ima.js v1.0.0
     * Released under the MIT license.
     */
  
(function (exports) {
  'use strict';

  /* global Blob */
  // This file is generated. Do not edit this file directly.
  // Command: 'npm run generate' should be used to update the content.

  /**
   * @type {Blob}
   */
  var AUDIO = new Blob([new Uint8Array([255, 227, 24, 196, 0, 0, 0, 3, 72, 1, 64, 0, 0, 4, 132, 16, 31, 227, 192, 225, 76, 255, 67, 12, 255, 221, 27, 255, 228, 97, 73, 63, 255, 195, 131, 69, 192, 232, 223, 255, 255, 207, 102, 239, 255, 255, 255, 101, 158, 206, 70, 20, 59, 255, 254, 95, 70, 149, 66, 4, 16, 128, 0, 2, 2, 32, 240, 138, 255, 36, 106, 183, 255, 227, 24, 196, 59, 11, 34, 62, 80, 49, 135, 40, 0, 253, 29, 191, 209, 200, 141, 71, 7, 255, 252, 152, 74, 15, 130, 33, 185, 6, 63, 255, 252, 195, 70, 203, 86, 53, 15, 255, 255, 247, 103, 76, 121, 64, 32, 47, 255, 34, 227, 194, 209, 138, 76, 65, 77, 69, 51, 46, 57, 55, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 255, 227, 24, 196, 73, 13, 153, 210, 100, 81, 135, 56, 0, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170])], { type: 'audio/mpeg' });

  /**
   * @type {Blob}
   */
  var VIDEO = new Blob([new Uint8Array([0, 0, 0, 28, 102, 116, 121, 112, 105, 115, 111, 109, 0, 0, 2, 0, 105, 115, 111, 109, 105, 115, 111, 50, 109, 112, 52, 49, 0, 0, 0, 8, 102, 114, 101, 101, 0, 0, 2, 239, 109, 100, 97, 116, 33, 16, 5, 32, 164, 27, 255, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55, 167, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 112, 33, 16, 5, 32, 164, 27, 255, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55, 167, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 112, 0, 0, 2, 194, 109, 111, 111, 118, 0, 0, 0, 108, 109, 118, 104, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 232, 0, 0, 0, 47, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 1, 236, 116, 114, 97, 107, 0, 0, 0, 92, 116, 107, 104, 100, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 101, 100, 116, 115, 0, 0, 0, 28, 101, 108, 115, 116, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 47, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 100, 109, 100, 105, 97, 0, 0, 0, 32, 109, 100, 104, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 172, 68, 0, 0, 8, 0, 85, 196, 0, 0, 0, 0, 0, 45, 104, 100, 108, 114, 0, 0, 0, 0, 0, 0, 0, 0, 115, 111, 117, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 83, 111, 117, 110, 100, 72, 97, 110, 100, 108, 101, 114, 0, 0, 0, 1, 15, 109, 105, 110, 102, 0, 0, 0, 16, 115, 109, 104, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 100, 105, 110, 102, 0, 0, 0, 28, 100, 114, 101, 102, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 12, 117, 114, 108, 32, 0, 0, 0, 1, 0, 0, 0, 211, 115, 116, 98, 108, 0, 0, 0, 103, 115, 116, 115, 100, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 87, 109, 112, 52, 97, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 16, 0, 0, 0, 0, 172, 68, 0, 0, 0, 0, 0, 51, 101, 115, 100, 115, 0, 0, 0, 0, 3, 128, 128, 128, 34, 0, 2, 0, 4, 128, 128, 128, 20, 64, 21, 0, 0, 0, 0, 1, 244, 0, 0, 1, 243, 249, 5, 128, 128, 128, 2, 18, 16, 6, 128, 128, 128, 1, 2, 0, 0, 0, 24, 115, 116, 116, 115, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 4, 0, 0, 0, 0, 28, 115, 116, 115, 99, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0, 28, 115, 116, 115, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 115, 0, 0, 1, 116, 0, 0, 0, 20, 115, 116, 99, 111, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 44, 0, 0, 0, 98, 117, 100, 116, 97, 0, 0, 0, 90, 109, 101, 116, 97, 0, 0, 0, 0, 0, 0, 0, 33, 104, 100, 108, 114, 0, 0, 0, 0, 0, 0, 0, 0, 109, 100, 105, 114, 97, 112, 112, 108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 105, 108, 115, 116, 0, 0, 0, 37, 169, 116, 111, 111, 0, 0, 0, 29, 100, 97, 116, 97, 0, 0, 0, 1, 0, 0, 0, 0, 76, 97, 118, 102, 53, 54, 46, 52, 48, 46, 49, 48, 49])], { type: 'video/mp4' });

  /* global URL */
  function setupDefaultValues(options) {
    return Object.assign({
      muted: false,
      timeout: 250,
      inline: false
    }, options);
  }

  function startPlayback(_ref, elementCallback) {
    var muted = _ref.muted,
        timeout = _ref.timeout,
        inline = _ref.inline;

    var _elementCallback = elementCallback(),
        element = _elementCallback.element,
        source = _elementCallback.source;

    var playResult = void 0;
    var timeoutId = void 0;
    var sendOutput = void 0;

    element.muted = muted;
    if (muted === true) {
      element.setAttribute('muted', 'muted');
    }
    // indicates that the video is to be played "inline",
    // that is within the element's playback area.
    if (inline === true) {
      element.setAttribute('playsinline', 'playsinline');
    }

    element.src = source;

    return new Promise(function (resolve) {
      playResult = element.play();
      timeoutId = setTimeout(function () {
        sendOutput(false, new Error('Timeout ' + timeout + ' ms has been reached'));
      }, timeout);
      sendOutput = function sendOutput(result) {
        var error = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

        // Clean up to avoid MediaElementLeak
        element.remove();
        element.srcObject = null;

        clearTimeout(timeoutId);
        resolve({ result: result, error: error });
      };

      if (playResult !== undefined) {
        playResult.then(function () {
          return sendOutput(true);
        }).catch(function (playError) {
          return sendOutput(false, playError);
        });
      } else {
        sendOutput(true);
      }
    });
  }

  //
  // API
  //

  function video(options) {
    options = setupDefaultValues(options);
    return startPlayback(options, function () {
      return {
        element: document.createElement('video'),
        source: URL.createObjectURL(VIDEO)
      };
    });
  }

  function audio(options) {
    options = setupDefaultValues(options);
    return startPlayback(options, function () {
      return {
        element: document.createElement('audio'),
        source: URL.createObjectURL(AUDIO)
      };
    });
  }

  var index = { audio: audio, video: video };

  /**
   * Returns a regular expression to test a string for the given className.
   *
   * @param {string} className The name of the class.
   * @return {RegExp} The regular expression used to test for that class.
   */
  var getClassRegexp = function getClassRegexp(className) {
    // Matches on
    // (beginning of string OR NOT word char)
    // classname
    // (negative lookahead word char OR end of string)
    return new RegExp("(^|[^A-Za-z-])" + className + "((?![A-Za-z-])|$)", "gi");
  };
  /**
   * Adds a class to the given element if it doesn't already have the class
   * @param {HTMLElement} element Element to which the class will be added.
   * @param {string} classToAdd Class to add.
   */

  var addClass = function addClass(element, classToAdd) {
    element.className = element.className.trim() + " " + classToAdd;
  };
  /**
   * Removes a class from the given element if it has the given class
   *
   * @param {HTMLElement} element Element from which the class will be removed.
   * @param {string} classToRemove Class to remove.
   */

  var removeClass = function removeClass(element, classToRemove) {
    var classRegexp = getClassRegexp(classToRemove);
    element.className = element.className.trim().replace(classRegexp, "");
  };
  /**
   * Returns whether or not the provided element has the provied class in its
   * className.
   * @param {HTMLElement} element Element to tes.t
   * @param {string} className Class to look for.
   * @return {boolean} True if element has className in class list. False
   *     otherwise.
   */

  var elementHasClass = function elementHasClass(element, className) {
    var classRegexp = getClassRegexp(className);
    return classRegexp.test(element.className);
  };

  var AdUi = function AdUi(controller) {
    this.controller = controller;
    /**
     * Div used as an ad container.
     */

    this.adContainerDiv = document.getElementById("adContainer");
    /**
     * Div used to display ad controls.
     */

    this.controlsDiv = document.getElementById("ima-controls-div");
    /**
     * Div used to display ad countdown timer.
     */

    this.countdownDiv = document.getElementById("ima-countdown-div");
    /**
     * Div used to display add seek bar.
     */

    this.seekBarDiv = document.getElementById("ima-seek-bar-div");
    /**
     * Div used to display ad progress (in seek bar).
     */

    this.progressDiv = document.getElementById("ima-progress-div");
    /**
     * Div used to display ad play/pause button.
     */

    this.playPauseDiv = document.getElementById("ima-play-pause-div");
    /**
     * Div used to display ad mute button.
     */

    this.muteDiv = document.getElementById("ima-mute-div");
    /**
     * Div used by the volume slider.
     */

    this.sliderDiv = document.getElementById("ima-slider-div");
    /**
     * Volume slider level visuals
     */

    this.sliderLevelDiv = document.getElementById("ima-slider-level-div");
    /**
     * Div used to display ad fullscreen button.
     */

    this.fullscreenDiv = document.getElementById("ima-fullscreen-div");
    /**
     * Bound event handler for onMouseUp.
     */

    this.boundOnMouseUp = this.onMouseUp.bind(this);
    /**
     * Bound event handler for onMouseMove.
     */

    this.boundOnMouseMove = this.onMouseMove.bind(this);
    /**
     * Boolean flag to show or hide the ad countdown timer.
     */

    this.showCountdown = true;

    if (this.controller.getSettings().showCountdown === false) {
      this.showCountdown = false;
    }
    /**
     * Boolean flag if the current ad is nonlinear.
     */


    this.isAdNonlinear = false;
    /**
     * Boolean flag if the current ad is fullscreen.
     */

    this.isFullscreen = false;
    this.fullscreenWidth = 0;
    this.fullscreenHeight = 0;
    this.createAdContainer();
  };
  /**
   * @return {HTMLElement} The div for the ad container.
   */


  AdUi.prototype.getAdContainerDiv = function () {
    return this.adContainerDiv;
  };
  /**
   * Creates the ad container.
   */


  AdUi.prototype.createAdContainer = function () {
    this.adContainerDiv.addEventListener("mouseenter", this.showAdControls.bind(this), false);
    this.adContainerDiv.addEventListener("mouseleave", this.hideAdControls.bind(this), false);
    this.createControls();
  };
  /**
   * Create the controls.
   */


  AdUi.prototype.createControls = function () {
    this.controlsDiv.style.width = "100%";

    if (!this.controller.getIsMobile()) {
      this.countdownDiv.innerHTML = this.controller.getSettings().adLabel;
      this.countdownDiv.style.display = this.showCountdown ? "block" : "none";
    } else {
      this.countdownDiv.style.display = "none";
    }

    this.seekBarDiv.style.width = "100%";
    addClass(this.playPauseDiv, "ima-playing");
    this.playPauseDiv.addEventListener("click", this.onAdPlayPauseClick.bind(this), false);
    addClass(this.muteDiv, "ima-non-muted");
    this.muteDiv.addEventListener("click", this.onAdMuteClick.bind(this), false);
    this.sliderDiv.addEventListener("mousedown", this.onAdVolumeSliderMouseDown.bind(this), false); // Hide volume slider controls on iOS as they aren't supported.

    if (this.controller.getIsIos()) {
      this.sliderDiv.style.display = "none";
    }

    addClass(this.fullscreenDiv, "ima-non-fullscreen");
    this.fullscreenDiv.addEventListener("click", this.onAdFullscreenClick.bind(this), false);
    document.addEventListener("fullscreenchange", this.exitFullscreenListener.bind(this), false);
    document.addEventListener("webkitfullscreenchange", this.exitFullscreenListener.bind(this), false);
    document.addEventListener("mozfullscreenchange", this.exitFullscreenListener.bind(this), false);
    document.addEventListener("MSFullscreenChange", this.exitFullscreenListener.bind(this), false);
  };

  AdUi.prototype.setFullscreen = function () {
    this.isFullscreen = true;
    this.setAdContainerSize(this.fullscreenWidth, this.fullscreenHeight);
  };

  AdUi.prototype.getFullscreenWidth = function () {
    return this.fullscreenWidth;
  };

  AdUi.prototype.getFullscreenHeight = function () {
    return this.fullscreenHeight;
  };

  AdUi.prototype.exitFullscreen = function () {
    this.isFullscreen = false;
    var initWidth = this.controller.getPlayerWidth();
    var initHeight = this.controller.getPlayerHeight();
    this.setAdContainerSize(initWidth, initHeight);
  };

  AdUi.prototype.exitFullscreenListener = function () {
    var isExitFullscreen = !document.fullscreenElement && !document.webkitIsFullScreen && !document.mozFullScreen && !document.msFullscreenElement;

    if (isExitFullscreen) {
      this.controller.toggleFullscreen();
    }
  };

  AdUi.prototype.requestFullscreenHandler = function () {
    var elem = document.documentElement;

    if (elem.requestFullscreen) {
      this.fullscreenWidth = window.screen.width;
      this.fullscreenHeight = window.screen.height;
      elem.requestFullscreen();
      this.controller.toggleFullscreen();
    } else if (elem.webkitRequestFullscreen) {
      /* Safari */
      this.fullscreenWidth = window.screen.width;
      this.fullscreenHeight = window.screen.height;
      elem.webkitRequestFullscreen();
      this.controller.toggleFullscreen();
    } else if (elem.msRequestFullscreen) {
      /* IE11 */
      this.fullscreenWidth = window.screen.width;
      this.fullscreenHeight = window.screen.height;
      elem.msRequestFullscreen();
      this.controller.toggleFullscreen();
    } else {
      this.fullscreenWidth = window.innerWidth;
      this.fullscreenHeight = window.innerHeight;
      this.controller.toggleFullscreen();
    }
  };

  AdUi.prototype.exitFullscreenHandler = function () {
    if (document.exitFullscreen) {
      document.exitFullscreen();
    } else if (document.webkitExitFullscreen) {
      /* Safari */
      document.webkitExitFullscreen();
    } else if (document.msExitFullscreen) {
      /* IE11 */
      document.msExitFullscreen();
    }
  };
  /**
   * Listener for clicks on the fullscreen button during ad playback.
   */


  AdUi.prototype.onAdFullscreenClick = function () {
    if (this.isFullscreen) {
      this.exitFullscreenHandler();
    } else {
      this.requestFullscreenHandler();
    }
  };
  /**
   * Set ads container size
   * @param {number} width - width for ads container
   * @param {number} height - height for ads container
   */


  AdUi.prototype.setAdContainerSize = function (width, height) {
    this.adContainerDiv.style.width = width;
    this.adContainerDiv.style.height = height;
  };
  /*
   * Listener for mouse down events during ad playback. Used for volume.
   */


  AdUi.prototype.onAdVolumeSliderMouseDown = function () {
    document.addEventListener("mouseup", this.boundOnMouseUp, false);
    document.addEventListener("mousemove", this.boundOnMouseMove, false);
  };
  /**
   * Handles UI changes when the ad is unmuted.
   */


  AdUi.prototype.unmute = function () {
    if (!elementHasClass(this.muteDiv, "ima-non-muted")) {
      addClass(this.muteDiv, "ima-non-muted");
    }

    removeClass(this.muteDiv, "ima-muted");
    this.sliderLevelDiv.style.width = this.controller.getPlayerVolume() * 100 + "%";
  };
  /**
   * Handles UI changes when the ad is muted.
   */


  AdUi.prototype.mute = function () {
    if (!elementHasClass(this.muteDiv, "ima-muted")) {
      addClass(this.muteDiv, "ima-muted");
    }

    removeClass(this.muteDiv, "ima-non-muted");
    this.sliderLevelDiv.style.width = "0%";
  };
  /**
   * Listener for clicks on the play/pause button during ad playback.
   */


  AdUi.prototype.onAdMuteClick = function () {
    this.controller.onAdMuteClick();
  };
  /**
   * Listener for clicks on the play/pause button during ad playback.
   */


  AdUi.prototype.onAdPlayPauseClick = function () {
    this.controller.onAdPlayPauseClick();
  };
  /**
   * Show pause and hide play button
   */


  AdUi.prototype.onAdsPaused = function () {
    this.controller.sdkImpl.adPlaying = false;

    if (!elementHasClass(this.playPauseDiv, "ima-paused")) {
      addClass(this.playPauseDiv, "ima-paused");
    }

    removeClass(this.playPauseDiv, "ima-playing");
    this.showAdControls();
  };
  /**
   * Show play and hide pause button
   */


  AdUi.prototype.onAdsPlaying = function () {
    this.controller.sdkImpl.adPlaying = true;

    if (!elementHasClass(this.playPauseDiv, "ima-playing")) {
      addClass(this.playPauseDiv, "ima-playing");
    }

    removeClass(this.playPauseDiv, "ima-paused");
  };
  /**
   * Handles when all ads have finished playing.
   */


  AdUi.prototype.onAllAdsCompleted = function () {
    this.controller.reset(); // this.hideAdContainer();

    window.parent.postMessage({
      type: "ALL_ADS_COMPLETED"
    }, "*");
  };
  /**
   * Takes data from the controller to update the UI.
   *
   * @param {number} currentTime Current time of the ad.
   * @param {number} remainingTime Remaining time of the ad.
   * @param {number} duration Duration of the ad.
   * @param {number} adPosition Index of the ad in the pod.
   * @param {number} totalAds Total number of ads in the pod.
   */


  AdUi.prototype.updateAdUi = function (currentTime, remainingTime, duration, adPosition, totalAds) {
    // Update countdown timer data
    var remainingMinutes = Math.floor(remainingTime / 60);
    var remainingSeconds = Math.floor(remainingTime % 60);

    if (remainingTime < 0) {
      remainingMinutes = 0;
      remainingSeconds = 0;
    }

    if (remainingSeconds.toString().length < 2) {
      remainingSeconds = "0" + remainingSeconds;
    }

    var podCount = ": ";

    if (totalAds > 1) {
      podCount = " (" + adPosition + " " + this.controller.getSettings().adLabelNofN + " " + totalAds + "): ";
    }

    this.countdownDiv.innerHTML = this.controller.getSettings().adLabel + podCount + remainingMinutes + ":" + remainingSeconds; // Update UI

    var playProgressRatio = currentTime / duration;
    var playProgressPercent = playProgressRatio * 100;
    this.progressDiv.style.width = playProgressPercent + "%";
  };
  /**
   * Show pause and hide play button
   */


  AdUi.prototype.onAdsResumed = function () {
    this.onAdsPlaying();
    this.showAdControls();
  };
  /**
   * Handles ad errors.
   */


  AdUi.prototype.onAdError = function () {
    this.hideAdContainer();
  };
  /**
   * Hide the ad container
   */


  AdUi.prototype.hideAdContainer = function () {
    console.log("hideAdContainer");
    this.adContainerDiv.style.display = "none";
  };
  /**
   * Show the ad container.
   */


  AdUi.prototype.showAdContainer = function () {
    this.adContainerDiv.style.display = "block";
  };
  /**
   * Shows ad controls on mouseover.
   */


  AdUi.prototype.showAdControls = function () {
    var _this$controller$getS = this.controller.getSettings(),
        disableAdControls = _this$controller$getS.disableAdControls;

    if (!disableAdControls) {
      if (!elementHasClass(this.controlsDiv, "ima-controls-div-showing")) {
        addClass(this.controlsDiv, "ima-controls-div-showing");
      }
    }
  };
  /**
   * Hide the ad controls.
   */


  AdUi.prototype.hideAdControls = function () {
    removeClass(this.controlsDiv, "ima-controls-div-showing");
  };
  /*
   * Mouse release listener used for volume slider.
   */


  AdUi.prototype.onMouseUp = function (event) {
    this.changeVolume(event);
    document.removeEventListener("mouseup", this.boundOnMouseUp);
    document.removeEventListener("mousemove", this.boundOnMouseMove);
  };
  /*
   * Mouse movement listener used for volume slider.
   */


  AdUi.prototype.onMouseMove = function (event) {
    this.changeVolume(event);
  };
  /*
   * Utility function to set volume and associated UI
   */


  AdUi.prototype.changeVolume = function (event) {
    var percent = (event.clientX - this.sliderDiv.getBoundingClientRect().left) / this.sliderDiv.offsetWidth;
    percent *= 100; // Bounds value 0-100 if mouse is outside slider region.

    percent = Math.min(Math.max(percent, 0), 100);
    this.sliderLevelDiv.style.width = percent + "%";

    if (percent === 0) {
      if (!elementHasClass(this.muteDiv, "ima-muted")) {
        addClass(this.muteDiv, "ima-muted");
      }

      removeClass(this.muteDiv, "ima-non-muted");
    } else {
      if (!elementHasClass(this.muteDiv, "ima-non-muted")) {
        addClass(this.muteDiv, "ima-non-muted");
      }

      removeClass(this.muteDiv, "ima-muted");
    }

    this.controller.setVolume(percent / 100); // 0-1
  };
  /**
   * Resets the state of the ad ui.
   */


  AdUi.prototype.reset = function () {
    this.hideAdContainer();
  };

  var SdkImpl = function SdkImpl(controller) {
    /**
     * Plugin controller.
     */
    this.controller = controller;
    /**
     * IMA SDK AdDisplayContainer.
     */

    this.adDisplayContainer = null;
    /**
     * True if the AdDisplayContainer has been initialized. False otherwise.
     */

    this.adDisplayContainerInitialized = false;
    /**
     * IMA SDK AdsLoader
     */

    this.adsLoader = null;
    /**
     * IMA SDK AdsManager
     */

    this.adsManager = null;
    /**
     * IMA SDK AdsRenderingSettings.
     */

    this.adsRenderingSettings = null;
    /**
     * VAST, VMAP, or ad rules response. Used in lieu of fetching a response
     * from an ad tag URL.
     */

    this.adsResponse = null;
    /**
     * Current IMA SDK Ad.
     */

    this.currentAd = null;
    /**
     * Timer used to track ad progress.
     */

    this.adTrackingTimer = null;
    /**
     * True if ALL_ADS_COMPLETED has fired, false until then.
     */

    this.allAdsCompleted = false;
    /**
     * True if ads are currently displayed, false otherwise.
     * True regardless of ad pause state if an ad is currently being displayed.
     */

    this.adsActive = false;
    /**
     * True if ad is currently playing, false if ad is paused or ads are not
     * currently displayed.
     */

    this.adPlaying = false;
    /**
     * True if the ad is muted, false otherwise.
     */

    this.adMuted = false;
    /**
     * Listener to be called to trigger manual ad break playback.
     */

    this.adBreakReadyListener = undefined;
    /**
     * Tracks whether or not we have already called adsLoader.contentComplete().
     */

    this.contentCompleteCalled = false;
    /**
     * True if the ad has timed out.
     */

    this.isAdTimedOut = false;
    /**
     * Stores the dimensions for the ads manager.
     */

    this.adsManagerDimensions = {
      width: 0,
      height: 0
    };
  };
  /**
   * Play ads
   */


  SdkImpl.prototype.playAds = function () {
    this.controller.showAdContainer(); // Sync ad volume with content volume.

    this.adsManager.setVolume(this.controller.getPlayerVolume());
    this.adsManager.start();
    this.adPlaying = true;
    this.adsActive = true;
  };
  /**
   * Pause ads.
   */


  SdkImpl.prototype.pauseAds = function () {
    this.adsManager.pause();
    this.adPlaying = false;
  };
  /**
   * Resume ads.
   */


  SdkImpl.prototype.resumeAds = function () {
    this.adsManager.resume();
    this.adPlaying = true;
  };
  /**
   * Initializes the AdDisplayContainer. On mobile, this must be done as a
   * result of user action.
   */


  SdkImpl.prototype.initializeAdDisplayContainer = function () {
    if (this.adDisplayContainer) {
      if (!this.adDisplayContainerInitialized) {
        this.adDisplayContainer.initialize();
        this.adDisplayContainerInitialized = true;
      }
    }
  };
  /**
   * Creates and initializes the IMA SDK objects.
   */


  SdkImpl.prototype.initAdObjects = function () {
    this.adDisplayContainer = new google.ima.AdDisplayContainer(this.controller.getAdContainerDiv() // this.controller.getContentPlayer()
    );
    this.adsLoader = new google.ima.AdsLoader(this.adDisplayContainer);
    this.adsLoader.addEventListener(google.ima.AdsManagerLoadedEvent.Type.ADS_MANAGER_LOADED, this.onAdsManagerLoaded.bind(this), false);
    this.adsLoader.addEventListener(google.ima.AdErrorEvent.Type.AD_ERROR, this.onAdsLoaderError.bind(this), false);
  };

  SdkImpl.prototype.onPlayerReady = function () {
    this.initAdObjects();

    if (this.controller.getSettings().vastTag) {
      this.requestAds();
    }
  };
  /**
   * Listener for errors fired by the AdsLoader.
   * @param {google.ima.AdErrorEvent} event The error event thrown by the
   *     AdsLoader. See
   *     https://developers.google.com/interactive-media-ads/docs/sdks/html5/client-side/reference/js/google.ima.AdError#.Type
   */


  SdkImpl.prototype.onAdsLoaderError = function (event) {
    window.console.warn("AdsLoader error: " + event.getError());
    this.controller.onErrorLoadingAds(event);

    if (this.adsManager) {
      this.adsManager.destroy();
    }
  };
  /**
   * Creates the AdsRequest and request ads through the AdsLoader.
   */


  SdkImpl.prototype.requestAds = function () {
    var adsRequest = new google.ima.AdsRequest();
    adsRequest.adTagUrl = this.controller.getSettings().vastTag; // if (this.controller.getSettings().vastLoadTimeout) {
    //   adsRequest.vastLoadTimeout = this.controller.getSettings().vastLoadTimeout;
    // }

    adsRequest.linearAdSlotWidth = this.controller.getPlayerWidth();
    adsRequest.linearAdSlotHeight = this.controller.getPlayerHeight();
    adsRequest.setAdWillAutoPlay(this.controller.adsWillAutoplay());
    adsRequest.setAdWillPlayMuted(this.controller.adsWillPlayMuted());
    this.adsLoader.requestAds(adsRequest);
  };
  /**
   * Listener for the ADS_MANAGER_LOADED event. Creates the AdsManager,
   * sets up event listeners, and triggers the 'adsready' event for
   * videojs-ads-contrib.
   *
   * @param {google.ima.AdsManagerLoadedEvent} adsManagerLoadedEvent Fired when
   *     the AdsManager loads.
   */


  SdkImpl.prototype.onAdsManagerLoaded = function (adsManagerLoadedEvent) {
    this.createAdsRenderingSettings();
    this.adsManager = adsManagerLoadedEvent.getAdsManager(this.controller.getContentPlayheadTracker(), this.adsRenderingSettings);
    this.adsManager.addEventListener(google.ima.AdErrorEvent.Type.AD_ERROR, this.onAdError.bind(this)); // this.adsManager.addEventListener(
    //     google.ima.AdEvent.Type.AD_BREAK_READY,
    //     this.onAdBreakReady.bind(this));
    // this.adsManager.addEventListener(
    //     google.ima.AdEvent.Type.CONTENT_PAUSE_REQUESTED,
    //     this.onContentPauseRequested.bind(this));
    // this.adsManager.addEventListener(
    //     google.ima.AdEvent.Type.CONTENT_RESUME_REQUESTED,
    //     this.onContentResumeRequested.bind(this));

    this.adsManager.addEventListener(google.ima.AdEvent.Type.ALL_ADS_COMPLETED, this.onAllAdsCompleted.bind(this)); // this.adsManager.addEventListener(
    //     google.ima.AdEvent.Type.LOADED,
    //     this.onAdLoaded.bind(this));

    this.adsManager.addEventListener(google.ima.AdEvent.Type.STARTED, this.onAdStarted.bind(this)); // this.adsManager.addEventListener(
    //     google.ima.AdEvent.Type.COMPLETE,
    //     this.onAdComplete.bind(this));
    // this.adsManager.addEventListener(
    //     google.ima.AdEvent.Type.SKIPPED,
    //     this.onAdComplete.bind(this));
    // this.adsManager.addEventListener(
    //     google.ima.AdEvent.Type.LOG,
    //     this.onAdLog.bind(this));
    // this.adsManager.addEventListener(
    //     google.ima.AdEvent.Type.PAUSED,
    //     this.onAdPaused.bind(this));

    this.adsManager.addEventListener(google.ima.AdEvent.Type.RESUMED, this.onAdResumed.bind(this));
    this.initAdsManager();
  };
  /**
   * Initialize the ads manager.
   */


  SdkImpl.prototype.initAdsManager = function () {
    try {
      var initWidth = this.controller.getPlayerWidth();
      var initHeight = this.controller.getPlayerHeight();
      this.adsManagerDimensions.width = initWidth;
      this.adsManagerDimensions.height = initHeight;
      this.adsManager.init(initWidth, initHeight, google.ima.ViewMode.NORMAL);
      this.adsManager.setVolume(this.controller.getPlayerVolume());
      this.initializeAdDisplayContainer();
      this.controller.adUi.controlsDiv.style.display = "block";
      this.playAds();
    } catch (adError) {
      this.onAdError(adError);
    }
  };
  /**
   * Syncs controls when an ad resumes.
   * @param {google.ima.AdEvent} adEvent The AdEvent thrown by the AdsManager.
   */


  SdkImpl.prototype.onAdResumed = function (adEvent) {
    this.controller.onAdsResumed();
  };
  /**
   * Starts the interval timer to check the current ad time when an ad starts
   * playing.
   * @param {google.ima.AdEvent} adEvent The AdEvent thrown by the AdsManager.
   */


  SdkImpl.prototype.onAdStarted = function (adEvent) {
    this.currentAd = adEvent.getAd();

    if (this.currentAd.isLinear()) {
      this.adTrackingTimer = setInterval(this.onAdPlayheadTrackerInterval.bind(this), 250); // this.controller.onLinearAdStart();
    }
  };
  /**
   * Gets the current time and duration of the ad and calls the method to
   * update the ad UI.
   */


  SdkImpl.prototype.onAdPlayheadTrackerInterval = function () {
    if (this.adsManager === null) return;
    var remainingTime = this.adsManager.getRemainingTime();
    var duration = this.currentAd.getDuration();
    var currentTime = duration - remainingTime;
    currentTime = currentTime > 0 ? currentTime : 0;
    var totalAds = 0;
    var adPosition;

    if (this.currentAd.getAdPodInfo()) {
      adPosition = this.currentAd.getAdPodInfo().getAdPosition();
      totalAds = this.currentAd.getAdPodInfo().getTotalAds();
    }

    this.controller.onAdPlayheadUpdated(currentTime, remainingTime, duration, adPosition, totalAds);
  };
  /**
   * Records that ads have completed and calls contentAndAdsEndedListeners
   * if content is also complete.
   * @param {google.ima.AdEvent} adEvent The AdEvent thrown by the AdsManager.
   */


  SdkImpl.prototype.onAllAdsCompleted = function (adEvent) {
    this.allAdsCompleted = true;
    this.controller.onAllAdsCompleted();
  };
  /**
   * @return {boolean} True if an ad is currently playing. False otherwise.
   */


  SdkImpl.prototype.isAdMuted = function () {
    return this.adMuted;
  };
  /**
   * Unmute ads.
   */


  SdkImpl.prototype.unmute = function () {
    this.adsManager.setVolume(1);
    this.adMuted = false;
  };
  /**
   * Mute ads.
   */


  SdkImpl.prototype.mute = function () {
    this.adsManager.setVolume(0);
    this.adMuted = true;
  };
  /**
   * @return {boolean} True if an ad is currently playing. False otherwise.
   */


  SdkImpl.prototype.isAdPlaying = function () {
    return this.adPlaying;
  };
  /**
   * Listener for errors thrown by the AdsManager.
   * @param {google.ima.AdErrorEvent} adErrorEvent The error event thrown by
   *     the AdsManager.
   */


  SdkImpl.prototype.onAdError = function (adErrorEvent) {
    var errorMessage = adErrorEvent.getError !== undefined ? adErrorEvent.getError() : adErrorEvent.stack;
    window.console.warn("Ad error: " + errorMessage);
    this.adsManager.destroy();
    this.controller.onAdError(adErrorEvent); // reset these so consumers don't think we are still in an ad break,
    // but reset them after any prior cleanup happens

    this.adsActive = false;
    this.adPlaying = false;
  };
  /**
   * Create AdsRenderingSettings for the IMA SDK.
   */


  SdkImpl.prototype.createAdsRenderingSettings = function () {
    this.adsRenderingSettings = new google.ima.AdsRenderingSettings();
    this.adsRenderingSettings.restoreCustomPlaybackStateOnAdBreakComplete = true; // adsRenderingSettings.uiElements = [
    //   google.ima.UiElements.AD_ATTRIBUTION,
    //   google.ima.UiElements.COUNTDOWN,
    // ];

    this.adsRenderingSettings.mimeTypes = ["application/x-mpegURL", "video/mp4", "video/mpeg", "video/ogg", "video/3gpp", "video/webm", "application/dash+xml"];
  };
  /**
   * Set ads as initial size
   */


  SdkImpl.prototype.exitFullscreen = function () {
    var initWidth = this.controller.getPlayerWidth();
    var initHeight = this.controller.getPlayerHeight();
    this.adsManager.resize(initWidth, initHeight, google.ima.ViewMode.NORMAL);
  };

  SdkImpl.prototype.setFullscreen = function () {
    var width = this.controller.getFullscreenWidth();
    var height = this.controller.getFullscreenHeight();
    this.adsManager.resize(width, height, google.ima.ViewMode.FULLSCREEN);
  };
  /**
   * Set the volume of the ads. 0-1.
   *
   * @param {number} volume The new volume.
   */


  SdkImpl.prototype.setVolume = function (volume) {
    this.adsManager.setVolume(volume);

    if (volume === 0) {
      this.adMuted = true;
    } else {
      this.adMuted = false;
    }
  };
  /**
   * Reset the SDK implementation.
   */


  SdkImpl.prototype.reset = function () {
    this.adsActive = false;
    this.adPlaying = false;

    if (this.adTrackingTimer) {
      // If this is called while an ad is playing, stop trying to get that
      // ad's current time.
      clearInterval(this.adTrackingTimer);
    }

    if (this.adsManager) {
      this.adsManager.destroy();
      this.adsManager = null;
    }

    if (this.adsLoader && !this.contentCompleteCalled) {
      this.adsLoader.contentComplete();
    }

    this.contentCompleteCalled = false;
    this.allAdsCompleted = false;
  };

  /**
   * Controller
   * @param  {Object} options - Options provided by the implementation
   * @param {string} options.vastTag - VAST tag URL
   * @param {number} options.width - Ads container width
   * @param {number} options.height - Ads container height
   */

  var Controller = function Controller(options) {
    var _this = this;

    /**
     * Stores user-provided settings.
     * @type {Object}
     */
    this.settings = {};
    /**
     * Whether or not we are running on a mobile platform.
     */

    this.isMobile = navigator.userAgent.match(/iPhone/i) || navigator.userAgent.match(/iPad/i) || navigator.userAgent.match(/Android/i);
    /**
     * Whether or not we are running on an iOS platform.
     */

    this.isIos = navigator.userAgent.match(/iPhone/i) || navigator.userAgent.match(/iPad/i);
    this.initWithSettings(options);
    this.autoplayAllowed = false;
    this.autoplayRequiresMute = false;
    this.checkUnmutedAutoplaySupport().then(function () {
      _this.adUi = new AdUi(_this);
      _this.sdkImpl = new SdkImpl(_this);

      _this.sdkImpl.onPlayerReady();

      if (_this.autoplayRequiresMute) {
        _this.adUi.mute();

        _this.sdkImpl.adMuted = true;
      } else {
        _this.adUi.unmute();

        _this.sdkImpl.adMuted = false;
      }
    });
  };

  Controller.IMA_DEFAULTS = {
    adLabel: "Advertisement",
    adLabelNofN: "of",
    debug: false,
    disableAdControls: false,
    prerollTimeout: 1000,
    preventLateAdStart: false,
    requestMode: "onLoad",
    showControlsForJSAds: true,
    timeout: 5000
  };
  /**
   * Called when there is an error loading ads.
   *
   * @param {Object} adErrorEvent The ad error event thrown by the IMA SDK.
   */

  Controller.prototype.onErrorLoadingAds = function (adErrorEvent) {
    this.adUi.onAdError();
  };
  /**
   * @return {number} The volume of the content player.
   */


  Controller.prototype.getPlayerVolume = function () {
    var volume = this.autoplayRequiresMute ? 0 : 1;
    return volume;
  };

  Controller.prototype.checkUnmutedAutoplaySupport = function () {
    var self = this;
    return new Promise(function (resolve) {
      index.video({
        timeout: 100,
        muted: false
      }).then(function (response) {
        if (response.result === false) {
          // Unmuted autoplay is not allowed.
          resolve(self.checkMutedAutoplaySupport());
        } else {
          // Unmuted autoplay is allowed.
          self.autoplayAllowed = true;
          self.autoplayRequiresMute = false;
          resolve();
        }
      });
    });
  };

  Controller.prototype.checkMutedAutoplaySupport = function () {
    var self = this;
    return new Promise(function (resolve) {
      index.video({
        timeout: 100,
        muted: true
      }).then(function (response) {
        if (response.result === false) {
          // Muted autoplay is not allowed.
          self.autoplayAllowed = false;
          self.autoplayRequiresMute = false;
        } else {
          // Muted autoplay is allowed.
          self.autoplayAllowed = true;
          self.autoplayRequiresMute = true;
        }

        resolve();
      });
    });
  };
  /**
   * Takes data from the sdk impl and passes it to the ad UI to update the UI.
   *
   * @param {number} currentTime Current time of the ad.
   * @param {number} remainingTime Remaining time of the ad.
   * @param {number} duration Duration of the ad.
   * @param {number} adPosition Index of the ad in the pod.
   * @param {number} totalAds Total number of ads in the pod.
   */


  Controller.prototype.onAdPlayheadUpdated = function (currentTime, remainingTime, duration, adPosition, totalAds) {
    this.adUi.updateAdUi(currentTime, remainingTime, duration, adPosition, totalAds);
  };
  /**
   * Changes the ad tag. You will need to call requestAds after this method
   * for the new ads to be requested.
   * @param {?string} adTag The ad tag to be requested the next time
   *     requestAds is called.
   */


  Controller.prototype.changeAdTag = function (adTag) {
    this.reset();
    this.settings.vastTag = adTag;
  };
  /**
   * Resets the state of the plugin.
   */


  Controller.prototype.reset = function () {
    this.sdkImpl.reset();
    this.adUi.reset();
  };
  /**
   * Handles the SDK firing an ad resumed event.
   */


  Controller.prototype.onAdsResumed = function () {
    this.adUi.onAdsResumed();
  };
  /**
   * Handles when all ads have finished playing.
   */


  Controller.prototype.onAllAdsCompleted = function () {
    this.adUi.onAllAdsCompleted();
  };
  /**
   * Called by the ad UI when the mute button is clicked.
   *
   */


  Controller.prototype.onAdMuteClick = function () {
    var isMuted = this.sdkImpl.isAdMuted();
    this.autoplayRequiresMute = !isMuted;

    if (isMuted) {
      this.adUi.unmute();
      this.sdkImpl.unmute();
    } else {
      this.adUi.mute();
      this.sdkImpl.mute();
    }
  };
  /**
   * Called by the ad UI when the play/pause button is clicked.
   */


  Controller.prototype.onAdPlayPauseClick = function () {
    if (this.sdkImpl.isAdPlaying()) {
      this.adUi.onAdsPaused();
      this.sdkImpl.pauseAds();
    } else {
      this.adUi.onAdsPlaying();
      this.sdkImpl.resumeAds();
    }
  };
  /**
   * Return whether or not we're in an iOS environment.
   *
   * @return {boolean} True if running on iOS, false otherwise.
   */


  Controller.prototype.getIsIos = function () {
    return this.isIos;
  };
  /**
   * @return {boolean} true if we expect that ads will autoplay. false otherwise.
   */


  Controller.prototype.adsWillAutoplay = function () {
    return this.autoplayAllowed;
  };
  /**
   * @return {boolean} true if we expect that ads will autoplay. false otherwise.
   */


  Controller.prototype.adsWillPlayMuted = function () {
    return this.autoplayRequiresMute;
  };
  /**
   * Get the player width.
   *
   * @return {number} The width of the player.
   */


  Controller.prototype.getPlayerWidth = function () {
    return this.settings.width;
  };
  /**
   * Get the player height.
   *
   * @return {number} The height of the player.
   */


  Controller.prototype.getPlayerHeight = function () {
    return this.settings.height;
  };
  /**
   * Relays ad errors to the player wrapper.
   *
   * @param {Object} adErrorEvent The ad error event thrown by the IMA SDK.
   */


  Controller.prototype.onAdError = function (adErrorEvent) {
    this.adUi.onAdError();
  };
  /**
   * Show the ad container.
   */


  Controller.prototype.showAdContainer = function () {
    this.adUi.showAdContainer();
  };
  /**
   * Returns the content playhead tracker.
   *
   * @return {Object} The content playhead tracker.
   */


  Controller.prototype.getContentPlayheadTracker = function () {
    var videoElem = document.createElement("video");
    return videoElem;
  };
  /**
   * Return whether or not we're in a mobile environment.
   *
   * @return {boolean} True if running on mobile, false otherwise.
   */


  Controller.prototype.getIsMobile = function () {
    return this.isMobile;
  };
  /**
   * @return {HTMLElement} The div for the ad container.
   */


  Controller.prototype.getAdContainerDiv = function () {
    return this.adUi.getAdContainerDiv();
  };
  /**
   * Initializes the AdDisplayContainer. On mobile, this must be done as a
   * result of user action.
   */


  Controller.prototype.initializeAdDisplayContainer = function () {
    this.sdkImpl.initializeAdDisplayContainer();
  };
  /**
   * Return the settings object.
   *
   * @return {Object} The settings object.
   */


  Controller.prototype.getSettings = function () {
    return this.settings;
  };
  /**
   * Set the volume of the player and ads. 0-1.
   *
   * @param {number} volume The new volume.
   */


  Controller.prototype.setVolume = function (volume) {
    this.sdkImpl.setVolume(volume);
  };
  /**
   * Toggle fullscreen state.
   */


  Controller.prototype.toggleFullscreen = function () {
    if (this.adUi.isFullscreen) {
      this.adUi.exitFullscreen();
      this.sdkImpl.exitFullscreen();
    } else {
      this.adUi.setFullscreen();
      this.sdkImpl.setFullscreen();
    }
  };

  Controller.prototype.getFullscreenWidth = function () {
    return this.adUi.getFullscreenWidth();
  };

  Controller.prototype.getFullscreenHeight = function () {
    return this.adUi.getFullscreenHeight();
  };
  /**
   * Extends the settings to include user-provided settings.
   *
   * @param {Object} options - Options to be used in initialization.
   */


  Controller.prototype.initWithSettings = function (options) {
    this.settings = this.extend({}, Controller.IMA_DEFAULTS, options || {});
    this.warnAboutDeprecatedSettings(); // Default showing countdown timer to true.

    this.showCountdown = true;

    if (this.settings.showCountdown === false) {
      this.showCountdown = false;
    }
  };
  /**
   * Logs console warnings when deprecated settings are used.
   */


  Controller.prototype.warnAboutDeprecatedSettings = function () {
    var _this2 = this;

    var deprecatedSettings = ["adWillAutoplay", "adsWillAutoplay", "adWillPlayMuted", "adsWillPlayMuted"];
    deprecatedSettings.forEach(function (setting) {
      if (_this2.settings[setting] !== undefined) {
        console.warn("WARNING: Aicactus video sdk ima setting " + setting + " is deprecated");
      }
    });
  };
  /**
   * Extends an object to include the contents of objects at parameters 2 onward.
   *
   * @param {Object} obj The object onto which the subsequent objects' parameters
   *     will be extended. This object will be modified.
   * @param {...Object} var_args The objects whose properties are to be extended
   *     onto obj.
   * @return {Object} The extended object.
   */


  Controller.prototype.extend = function (obj) {
    var arg;
    var index;
    var key;

    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    for (index = 0; index < args.length; index++) {
      arg = args[index];

      for (key in arg) {
        if (arg.hasOwnProperty(key)) {
          obj[key] = arg[key];
        }
      }
    }

    return obj;
  };

  /**
   * @param  {Object} options - Options provided by the implementation
   * @param {string} options.vastTag - VAST tag URL
   * @param {number} options.width - Ads container width
   * @param {number} options.height - Ads container height
   */

  var Init = function Init(options) {
    this.controller = new Controller(options);
  };

  var init = function init(options) {
    new Init(options);
  };

  exports.init = init;

  Object.defineProperty(exports, '__esModule', { value: true });

})(this["video-sdk-ima"] = this["video-sdk-ima"] || {});
